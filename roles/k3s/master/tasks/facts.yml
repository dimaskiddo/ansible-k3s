---
- name: Set fallback value for if distribution is not defined
  set_fact:
    ansible_distribution: '{{ ansible_lsb["id"] }}'
  when:
    - ansible_distribution is not defined

- name: Fail if Operating System is not Supported
  fail:
    msg: "Supported Operating System is Debian 64-bit"
  when:
    - ansible_distribution != 'Debian'
    - ansible_architecture != 'x86_64'

- name: Clean-up K3S Version Number from Vars
  set_fact:
    k3s_version_stripped: "{{ k3s_version | regex_replace('^v', '') }}"

- name: Parse K3S Version Number from Vars
  set_fact:
    k3s_version_number: "{{ k3s_version_stripped.split('+')[0] }}"

- name: Parse K3S Version Parts from Vars
  set_fact:
    k3s_version_parts: "{{ k3s_version_number.split('.') }}"

- name: Ensure K3S Version Parts Have Same Length
  set_fact:
    k3s_version_vars: "{{ k3s_version_parts + ['0'] * (3 - k3s_version_parts|length) }}"
    k3s_version_compare: "{{ ['1', '25', '0'] }}"

- name: Initialize Comparison K3S Version
  set_fact:
    version_is_greater_or_equal: false
    comparison_done: false

- name: Compare K3S Major Version
  set_fact:
    version_is_greater_or_equal: "{{ k3s_version_vars[0] | int > k3s_version_compare[0] | int }}"
    comparison_done: "{{ k3s_version_vars[0] | int != k3s_version_compare[0] | int }}"
  when:
    - not comparison_done

- name: Compare K3S Minor Version
  set_fact:
    version_is_greater_or_equal: "{{ k3s_version_vars[1] | int > k3s_version_compare[1] | int }}"
    comparison_done: "{{ k3s_version_vars[1] | int != k3s_version_compare[1] | int }}"
  when:
    - not comparison_done
    - not version_is_greater_or_equal

- name: Compare K3S Patch Version
  set_fact:
    version_is_greater_or_equal: "{{ k3s_version_vars[2] | int >= k3s_version_compare[2] | int }}"
  when:
    - not comparison_done
    - not version_is_greater_or_equal

- name: Check Required Variable 'block_device' if 'enable_zfs' or 'enable_lvm'
  fail: 
    msg: "Required Variable 'block_device' is Required"
  when:
    - enable_zfs == 'true' or enable_lvm == 'true'
    - block_device is not defined

- name: Make Sure 'enable_lvm' is false When 'enable_zfs' is true
  set_fact:
    enable_lvm: 'false'
  when:
    - enable_zfs == 'true'

- name: Make Sure 'enable_zfs' is false When 'enable_lvm' is true
  set_fact:
    enable_zfs: 'false'
  when:
    - enable_lvm == 'true'
