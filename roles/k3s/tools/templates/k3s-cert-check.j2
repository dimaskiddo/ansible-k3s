#!/bin/bash
# K3s Certificate Expiration and Rotation Script
# Created By Dimas Restu Hidayanto (dimas.restu@student.upi.edu)

DAYS=7
TIMESTAMP=`date "+%Y-%m-%d %H:%M:%S"`

if [ $# -ne 1 ]
then
  echo "$TIMESTAMP [FATAL] Please Specify K3s type, master or agent"
  exit 1
fi

TYPE=$1
if [ $TYPE == "master" ]
then
  SERVICE_NAME="k3s.service"
  CERT_FILE=/var/lib/rancher/k3s/server/tls/serving-kube-apiserver.crt
else
  SERVICE_NAME="k3s-agent.service"
  CERT_FILE=/var/lib/rancher/k3s/agent/serving-kubelet.crt
fi
EXPIRATION_LIMIT=$(($(date +%s) + (86400*$DAYS)))

if [ -f $CERT_FILE ]
then
  # -----------------------------------------------------------------------------------------------------------------
  # When it's master node make sure to also check certificate cache bug (https://www.ibm.com/support/pages/node/6444205)
  # -----------------------------------------------------------------------------------------------------------------
  if [ $TYPE == "master" ]
  then
    if [ `netstat -tlnp | grep 6443 | wc -l` -ge 1 ]
    then
      # First Check
      EXPIRATION_DATE_CACHE=$(date -d "$(: | openssl s_client -connect localhost:6443 -showcerts < /dev/null 2>&1 \
                                           | openssl x509 -noout -enddate \
                                           |  awk -F '=' '{print $2}' \
                                           | awk '{print $1,$2,$4}')" '+%s')

      if [ $EXPIRATION_LIMIT -gt $EXPIRATION_DATE_CACHE ]; then
        echo "$TIMESTAMP [WARN] K3s $TYPE certificate cache will expires less than $DAYS days, on $(date -d @$EXPIRATION_DATE_CACHE '+%Y-%m-%d')"
        echo "$TIMESTAMP [INFO] Running K3s $TYPE certificate cache rotation task"
        echo "$TIMESTAMP [INFO]  -> Removing K3s $TYPE Dynamic Certificate File"
        rm -f /var/lib/rancher/k3s/server/tls/dynamic-cert.json
        echo "$TIMESTAMP [INFO]  -> Removing K3s $TYPE Serving Certificate Secret"
        kubectl --insecure-skip-tls-verify delete secret k3s-serving -n kube-system > /dev/null
        echo "$TIMESTAMP [INFO]  -> Restarting K3s $TYPE service '$SERVICE_NAME'"
        systemctl restart $SERVICE_NAME
        echo "$TIMESTAMP [INFO] K3s $TYPE certificate cache rotation task completed"
      fi

      # After Rotation Check
      EXPIRATION_DATE_CACHE=$(date -d "$(: | openssl s_client -connect localhost:6443 -showcerts < /dev/null 2>&1 \
                                           | openssl x509 -noout -enddate \
                                           |  awk -F '=' '{print $2}' \
                                           | awk '{print $1,$2,$4}')" '+%s')
    else
      echo "$TIMESTAMP [WARN] K3s $TYPE service might be not running with well"
    fi
  fi

  # -----------------------------------------------------------------------------------------------------------------
  # Check certificate expiration by checking the serving certificate expiration info 
  # -----------------------------------------------------------------------------------------------------------------
  # First Check
  EXPIRATION_DATE_FILE=$(date -d "$(: | openssl x509 -text -noout -text -in ${CERT_FILE} \
                                      | grep 'Not After' \
                                      | awk '{print $4,$5,$7}')" '+%s')

  if [ $EXPIRATION_LIMIT -gt $EXPIRATION_DATE_FILE ]; then
    echo "$TIMESTAMP [WARN] K3s $TYPE certificate will expires less than $DAYS days, on $(date -d @$EXPIRATION_DATE_FILE '+%Y-%m-%d')"
    echo "$TIMESTAMP [INFO] Running K3s $TYPE certificate rotation"
    echo "$TIMESTAMP [INFO]  -> Restarting K3s $TYPE service '$SERVICE_NAME'"
    systemctl restart $SERVICE_NAME
    echo "$TIMESTAMP [INFO] K3s $TYPE certificate cache rotation task completed"
  fi

  # After Rotation Check
  EXPIRATION_DATE_FILE=$(date -d "$(: | openssl x509 -text -noout -text -in ${CERT_FILE} \
                                      | grep 'Not After' \
                                      | awk '{print $4,$5,$7}')" '+%s')

  # -----------------------------------------------------------------------------------------------------------------
  # Certificate cheking and rotaion assumed to be done. Report the info from the last check
  # -----------------------------------------------------------------------------------------------------------------
  if [ $TYPE == "master" ]
  then
    echo "$TIMESTAMP [INFO] K3s $TYPE certificate cache is OK, will expires on $(date -d @$EXPIRATION_DATE_CACHE '+%Y-%m-%d')"
  fi
  echo "$TIMESTAMP [INFO] K3s $TYPE certificate file is OK, will expires on $(date -d @$EXPIRATION_DATE_FILE '+%Y-%m-%d')"

  exit 0
else
  echo "$TIMESTAMP [FATAL] K3s $TYPE certificate file not found"
  exit 1
fi
