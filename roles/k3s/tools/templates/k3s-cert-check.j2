#!/bin/bash
# K3s Certificate Expiration and Rotation Script
# Created By Dimas Restu Hidayanto (dimas.restu@student.upi.edu)


if [ $# -lt 1 ]
then
  echo "`date "+%Y-%m-%d %H:%M:%S"` [FATAL] Please Specify K3s type, master or agent"
  exit 1
fi

K3S_TYPE=$1
K3S_FIRST_MASTER=${2:-0}
K3S_DELAY_MASTER_CHECK=30

DAYS_LIMIT_BEFORE_EXPIRATION=7
EXPIRATION_LIMIT=$(($(date +%s) + (86400*$DAYS_LIMIT_BEFORE_EXPIRATION)))

if [ $K3S_TYPE == "master" ]
then
  SERVICE_NAME="k3s.service"
  CERT_FILE=/var/lib/rancher/k3s/server/tls/serving-kube-apiserver.crt
else
  SERVICE_NAME="k3s-agent.service"
  CERT_FILE=/var/lib/rancher/k3s/agent/serving-kubelet.crt
fi

if [ -f $CERT_FILE ]
then
  # -----------------------------------------------------------------------------------------------------------------
  # When it's master node make sure to also check certificate cache bug (https://www.ibm.com/support/pages/node/6444205)
  # -----------------------------------------------------------------------------------------------------------------
  if [[ $K3S_TYPE == "master" && $K3S_FIRST_MASTER -eq 1 ]]
  then
    if [ `netstat -tlnp | grep 6443 | wc -l` -ge 1 ]
    then
      # First Check
      EXPIRATION_DATE_CACHE=$(date -d "$(: | openssl s_client -connect localhost:6443 -showcerts < /dev/null 2>&1 \
                                           | openssl x509 -noout -enddate \
                                           | awk -F '=' '{print $2}' \
                                           | awk '{print $1,$2,$4}')" '+%s')

      if [ $EXPIRATION_LIMIT -gt $EXPIRATION_DATE_CACHE ]; then
        echo "`date "+%Y-%m-%d %H:%M:%S"` [WARN] K3s $K3S_TYPE certificate cache will expires less than $DAYS days, on $(date -d @$EXPIRATION_DATE_CACHE '+%Y-%m-%d')"
        echo "`date "+%Y-%m-%d %H:%M:%S"` [INFO] Running K3s $K3S_TYPE certificate cache rotation task"
        echo "`date "+%Y-%m-%d %H:%M:%S"` [INFO]  -> Backing-up K3s $K3S_TYPE Certificate"
        mkdir -p /var/lib/rancher/k3s/server/backups
        kubectl --insecure-skip-tls-verify get -o yaml secret k3s-serving -n kube-system > /var/lib/rancher/k3s/server/backups/kube-serving_`date "+%Y-%m-%d_%H-%M-%S"`.yaml
        tar -czvf /var/lib/rancher/k3s/server/backups/tls_`date "+%Y-%m-%d_%H-%M-%S"`.tar.gz /var/lib/rancher/k3s/server/tls
        echo "`date "+%Y-%m-%d %H:%M:%S"` [INFO]  -> Removing K3s $K3S_TYPE Dynamic Certificate File"
        rm -f /var/lib/rancher/k3s/server/tls/dynamic-cert.json
        echo "`date "+%Y-%m-%d %H:%M:%S"` [INFO]  -> Removing K3s $K3S_TYPE Serving Certificate Secret"
        kubectl --insecure-skip-tls-verify delete secret k3s-serving -n kube-system
        echo "`date "+%Y-%m-%d %H:%M:%S"` [INFO]  -> Restarting K3s $K3S_TYPE service '$SERVICE_NAME'"
        systemctl restart $SERVICE_NAME
        echo "`date "+%Y-%m-%d %H:%M:%S"` [INFO] K3s $K3S_TYPE certificate cache rotation task completed"
      fi

      # After Rotation Check
      EXPIRATION_DATE_CACHE=$(date -d "$(: | openssl s_client -connect localhost:6443 -showcerts < /dev/null 2>&1 \
                                           | openssl x509 -noout -enddate \
                                           | awk -F '=' '{print $2}' \
                                           | awk '{print $1,$2,$4}')" '+%s')

      echo "`date "+%Y-%m-%d %H:%M:%S"` [INFO] K3s $K3S_TYPE certificate cache is OK, will expires on $(date -d @$EXPIRATION_DATE_CACHE '+%Y-%m-%d')"
    else
      echo "`date "+%Y-%m-%d %H:%M:%S"` [WARN] K3s $K3S_TYPE service might be not running with well"
    fi
  fi

  # -----------------------------------------------------------------------------------------------------------------
  # Check certificate expiration by checking the serving certificate expiration info
  # -----------------------------------------------------------------------------------------------------------------
  if [[ $K3S_TYPE == "master" && $K3S_FIRST_MASTER -eq 0 ]]
  then
    # Delay other master certificate file check
    echo "`date "+%Y-%m-%d %H:%M:%S"` [INFO] Delaying K3s $K3S_TYPE certificate file check for $K3S_DELAY_MASTER_CHECK seconds"
    sleep $K3S_DELAY_MASTER_CHECK
  fi

  # First Check
  EXPIRATION_DATE_FILE=$(date -d "$(: | openssl x509 -text -noout -text -in ${CERT_FILE} \
                                      | grep 'Not After' \
                                      | awk '{print $4,$5,$7}')" '+%s')

  if [ $EXPIRATION_LIMIT -gt $EXPIRATION_DATE_FILE ]; then
    echo "`date "+%Y-%m-%d %H:%M:%S"` [WARN] K3s $K3S_TYPE certificate will expires less than $DAYS days, on $(date -d @$EXPIRATION_DATE_FILE '+%Y-%m-%d')"
    echo "`date "+%Y-%m-%d %H:%M:%S"` [INFO] Running K3s $K3S_TYPE certificate rotation"
    echo "`date "+%Y-%m-%d %H:%M:%S"` [INFO]  -> Restarting K3s $K3S_TYPE service '$SERVICE_NAME'"
    systemctl restart $SERVICE_NAME
    echo "`date "+%Y-%m-%d %H:%M:%S"` [INFO] K3s $K3S_TYPE certificate cache rotation task completed"
  fi

  # After Rotation Check
  EXPIRATION_DATE_FILE=$(date -d "$(: | openssl x509 -text -noout -text -in ${CERT_FILE} \
                                      | grep 'Not After' \
                                      | awk '{print $4,$5,$7}')" '+%s')

  echo "`date "+%Y-%m-%d %H:%M:%S"` [INFO] K3s $K3S_TYPE certificate file is OK, will expires on $(date -d @$EXPIRATION_DATE_FILE '+%Y-%m-%d')"
else
  echo "`date "+%Y-%m-%d %H:%M:%S"` [FATAL] K3s $K3S_TYPE certificate file not found"
  exit 1
fi

exit 0
